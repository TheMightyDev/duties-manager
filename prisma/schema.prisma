generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider       	 = "zod-prisma-types"
	createInputTypes = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String       @id @default(cuid())
  firstName          String
  lastName           String
  isAdmin            Boolean      @default(false)
  organizationId     String
  phoneNumber        String       @unique
  gender             String
  rank               UserRank
  permanentEntryDate DateTime?
  registerDate       DateTime?
  accounts           Account[]
  reserves           Assignment[] @relation("reserve")
  assignments        Assignment[] @relation("assignee")
  exemptions         Exemption[]
  periods            Period[]
  preferences        Preference[]
  sessions           Session[]
  organization       Organization @relation(fields: [organizationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String  @id @default(cuid())
  name        String
  description String?
  duties      Duty[]
  users       User[]
}

model Duty {
  id             String       @id @default(cuid())
  kind           DutyKind
  organizationId String
  startDate      DateTime
  endDate        DateTime
  role           UserRole
  quantity       Int
  score          Int
  isPrivate      Boolean      @default(true)
  description    String?
  assignments    Assignment[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Assignment {
  id         String  @id @default(cuid())
  dutyId     String
  assigneeId String
  reserveId  String?
  extraScore Int?
  duty       Duty    @relation(fields: [dutyId], references: [id], onDelete: Cascade)
  reserve    User?   @relation("reserve", fields: [reserveId], references: [id])
  assignee   User    @relation("assignee", fields: [assigneeId], references: [id], onDelete: Cascade)
}

model Period {
  id          String       @id @default(cuid())
  userId      String
  role        UserRole
  status      PeriodStatus
  startDate   DateTime
  endDate     DateTime
  description String?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exemption {
  id          String          @id @default(cuid())
  userId      String
  startDate   DateTime
  endDate     DateTime?
  description String
  impact      ExemptionImpact
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Preference {
  id          String               @id @default(cuid())
  userId      String
  importance  PreferenceImportance
  startDate   DateTime
  endDate     DateTime
  description String
  kind        PreferenceKind
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  SQUAD
  OFFICER
  COMMANDER
  EXEMPT
}

enum PeriodStatus {
  FULFILLS_ROLE
  TEMPORARILY_ABSENT
  TEMPORARILY_EXEMPT
}

enum DutyKind {
  GUARDING
  KITCHEN
  AGRICULTURE
  FOOD_PACKAGING
  OTHER
}

enum PreferenceKind {
  VACATION
  MEDICAL
  EDUCATION
  APPOINTMENT
  RELIGION
  FAMILY_EVENT
  CELEBRATION
  OTHER
}

enum PreferenceImportance {
  PREFERS
  PREFERS_NOT_TO
  CANT
  HIGH_HESITATION
}

enum ExemptionImpact {
  EASE_GUARDING
  NO_GUARDING
  NO_DUTIES
}

enum UserRank {
  PRIVATE
  CORPORAL
  SERGEANT
  STAFF_SERGEANT
  SERGEANT_FIRST_CLASS
  MASTER_SERGEANT
  PROFESSIONAL_ACADEMIC_OFFICER
  SENIOR_ACADEMIC_OFFICER
  SPECIAL_ACADEMIC_OFFICER
  SECOND_LIEUTENANT
  LIEUTENANT
  CAPTAIN
  MAJOR
}
