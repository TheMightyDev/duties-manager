// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                    String  @id @default(cuid())
    userId                String
    type                  String
    provider              String
    providerAccountId     String
    refreshToken          String? // @db.Text
    accessToken           String? // @db.Text
    expiresAt             Int?
    tokenType             String?
    scope                 String?
    idToken               String? // @db.Text
    session_state         String?
    user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refreshTokenExpiresIn	Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    SQUAD
    COMMANDER
    OFFICER
    EXEMPT
}

model User {
    id             String       @id @default(cuid())
    firstName      String
    lastName       String
    isAdmin        Boolean      @default(false)
    organizationId String
    role           UserRole
    roleStartDate  DateTime
    retireDate     DateTime
    email          String?      @unique
    emailVerified  DateTime?
		
    organization   Organization @relation(fields: [organizationId], references: [id])
    accounts       Account[]
    sessions       Session[]
    assignments    Assignment[] @relation(name: "user")
    reserves       Assignment[] @relation(name: "reserve")
    preferences 	 Preference[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Organization {
    id          String  @id @default(cuid())
    name        String
    description String?

    users 			User[]
    duties 			Duty[]
}

enum DutyKind {
    GUARDING
    KITCHEN
    AGRICULTURE
    FOOD_PACKAGING
    OTHER
}

model Duty {
    id             String       @id @default(cuid())
    kind           DutyKind
    organizationId String
    startDate      DateTime
    endDate        DateTime
    role           UserRole
    quantity       Int
    score          Int
    description    String?
		
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    assignments 	 Assignment[]
}

model Assignment {
    id        String @id @default(cuid())
    dutyId    String
    userId    String
    reserveId String
		
    duty      Duty   @relation(fields: [dutyId], references: [id], onDelete: Cascade)
    user      User   @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade)
    reserve   User   @relation(name: "reserve", fields: [reserveId], references: [id])
}

enum PreferenceReason {
    VACATION
    MEDICAL
    EDUCATION
    APPOINTMENT
    RELIGION
    FAMILY_EVENT
    CELEBRATION
    OTHER
}

enum PreferenceImportance {
    HIGH_PRIORITY
    NORMAL_PRIORITY
    PREFERS_NOT_TO
    ABSENT
}

model Preference {
    id          String               @id @default(cuid())
    userId      String
    reason      PreferenceReason
		importance  PreferenceImportance
    startDate   DateTime
    endDate     DateTime
    description String
		
    user 				User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
