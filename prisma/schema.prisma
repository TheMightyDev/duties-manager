generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshToken          String?
  accessToken           String?
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String?
  session_state         String?
  refreshTokenExpiresIn Int?
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(cuid())
  firstName      String
  lastName       String
  isAdmin        Boolean      @default(false)
  organizationId String
  role           UserRole
  roleStartDate  DateTime
  retireDate     DateTime
  email          String?      @unique
  emailVerified  DateTime?
  accounts       Account[]
  reserves       Assignment[] @relation("reserve")
  assignments    Assignment[] @relation("user")
  preferences    Preference[]
  sessions       Session[]
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String  @id @default(cuid())
  name        String
  description String?
  duties      Duty[]
  users       User[]
}

model Duty {
  id             String       @id @default(cuid())
  kind           DutyKind
  organizationId String
  startDate      DateTime
  endDate        DateTime
  role           UserRole
  quantity       Int
  score          Int
  description    String?
  assignments    Assignment[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Assignment {
  id        String @id @default(cuid())
  dutyId    String
  userId    String
  reserveId String
  duty      Duty   @relation(fields: [dutyId], references: [id], onDelete: Cascade)
  reserve   User   @relation("reserve", fields: [reserveId], references: [id])
  user      User   @relation("user", fields: [userId], references: [id], onDelete: Cascade)
}

model Preference {
  id          String               @id @default(cuid())
  userId      String
  reason      PreferenceReason
  importance  PreferenceImportance
  startDate   DateTime
  endDate     DateTime?
  description String
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  SQUAD
  COMMANDER
  OFFICER
  EXEMPT
}

enum DutyKind {
  GUARDING
  KITCHEN
  AGRICULTURE
  FOOD_PACKAGING
  OTHER
}

enum PreferenceReason {
  VACATION
  MEDICAL
  EDUCATION
  APPOINTMENT
  RELIGION
  FAMILY_EVENT
  CELEBRATION
  OTHER
  EXEMPTION
}

enum PreferenceImportance {
  PREFERS
  PREFERS_NOT_TO
  NORMAL_PRIORITY_NOT_TO
  HIGH_PRIORITY_NOT_TO
  EASE_GUARDING
  NO_GUARDING
  ABSENT
}
